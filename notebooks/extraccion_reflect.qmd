---
title: "Extracción de reflectancia"
type: html
date: last-modified
author:
  - name: Víctor Gauto
    orcid: 0000-0001-9960-8558
    corresponding: true
    email: victor.gauto@ca.frre.utn.edu.ar
    affiliations:
      - <a href='https://www.instagram.com/gistaq.utn/' target="_blank">GISTAQ (UTN-FRRe) {{< fa arrow-up-right-from-square >}}</a>
      - <a href='https://iidthh.conicet.gov.ar/' target="_blank">IIDTHH (UNNE, CONICET) {{< fa arrow-up-right-from-square >}}</a>
      - <a href='https://ig.conae.unc.edu.ar/' target="_blank">Instituto Gulich (UNC, CONAE){{< fa arrow-up-right-from-square >}}</a>
execute:
  eval: false
  echo: true
code-annotations: hover
---

La reflectancia de superficie (R<sub>rs</sub>) se extrae usando las coordenadas de los muestreos y el producto satelital.

Las coordenadas geográficas provienen del archivo Excel donde se registran las mediciones in situ. El producto satelital es Sentinel-2 MSI, descargado de Data Space de la plataforma Copernicus.

Se inicia con la lectura del Excel extrayendo las columnas de latitud, longitud y la fecha de muestreo.

```{r}
coord_sitios <- readxl::read_xlsx(
  path = "datos/datos_gistaq.xlsx",
  sheet = 1,
  .name_repair = "unique_quiet") |>
  select(fechas = 1, longitud = 4, latitud = 5) |> # <1>
  fill(fechas) |>
  mutate(fechas = ymd(fechas)) |>
  dplyr::filter(fechas == ymd(y)) |>
  drop_na() |>
  select(-fechas) |>
  mutate(punto = row_number(), .before = 1)
```
 1. Selecciono las columnas de interés y cambio de nombre.

Luego se transforma a vector, transformando las coordenadas a `EPSG:32721` ya que es el sistema de referencia del producto satelital.

```{r}
coord_vect <- vect(
  coord_sitios,
  geom = c("longitud", "latitud"),
  crs = "EPSG:4326", # <1>
  keepgeom = FALSE) |>
  terra::project("EPSG:32721")  # <2>
```
1. Sistema de referencia de los datos almacenados.
2. Transformo para que sea coincidente con el producto satelital.

Se procede con la verificación de ausencia de nubes a partir de la máscara de probabilidades de nubosidad a 20 m de resolución. En caso de que un sitio muestral presenta nubes, es descartado.

```{r}
# nombre del producto
lis <- list.files(path = "producto/", pattern = "SAFE", full.names = TRUE)

# carpeta con las carpetas de distintas resoluciones
carpeta1 <- glue("{lis}/GRANULE") # <1>
carpeta2 <- list.files(carpeta1) # <1>
carpeta3 <- glue("{carpeta1}/{carpeta2}/IMG_DATA") # <1>
carpeta4 <- glue("{carpeta1}/{carpeta2}/QI_DATA") # <1>

# leo el ráster
raster_prob <- terra::rast(glue("{carpeta4}/MSK_CLDPRB_20m.jp2")) # <2>

# extraemos los valores de pixel para cada punto
nubes <- terra::extract(raster_prob, coord_vect) |>
  as_tibble() |>
  rename(punto = ID, probabilidad = MSK_CLDPRB_20m) |>
  dplyr::filter(probabilidad == 0) # <3>

# se conservan los sitios de muestreo con probabilidad de nubes CERO
coord_sf_sin_nubes <- inner_join(
  st_as_sf(coord_vect),
  nubes,
  by = join_by(punto))

if (nrow(coord_sitios) != nrow(coord_sf_sin_nubes)) { # <4>

  # sitios con nubes
  puntos_nubes <- anti_join(
    st_as_sf(coord_vect),
    nubes,
    by = join_by(punto)) |>
    pull(punto) |>
    str_flatten_comma(string = _, last = " y ")

  mensaje(glue("Los sitios {puntos_nubes} presentan nubes y se descartan"))
}
```
1. Directorios hasta la ubicación de los ráster de interés.
2. Ráster que contiene la máscara de probabilidades de nubes.
3. Conservo únicamente aquellos puntos en los que no hay nubes.
4. Verifico la cantidad de sitios que fueron afectados por las nubes.

Luego de verificar un cielo despejado, se lleva a cabo la extracción de los valores de píxel. Se realiza un promedio a partir de una ventana de 3x3 alrededor del sitio central y se promedia el valor final.

```{r}
# leo recorte
stack_bandas <- rast(z)

stack_bandas_3x3 <- terra::focal( # <1>
    stack_bandas, w = 3, fun = mean, na.rm = TRUE) # <1>

reflect_3x3 <- terra::extract(stack_bandas_3x3, coord_sf_sin_nubes) |> # <2>
  as_tibble() |>
  rename(punto = ID) |>
  pivot_longer(
    cols = -punto, names_to = "banda", values_to = "reflect"
  ) |>
  mutate(reflect = reflect/10000) |> # <3>
  mutate(fecha = ymd(y), .before = 1) |>
  inner_join(coord_sitios, by = join_by(punto)) |>
  mutate(pixel = "3x3", .before = banda)
```
1. Transformo los píxeles del recorte a valores medios de una grilla 3x3.
2. Extracción de los valores de píxel para cada sitio muestral.
3. Aplico factor de escala.

Finalmente se almacenan los valores de R<sub>rs</sub> en un archivo de texto (`.csv`).

```{r}
write_csv(reflect_3x3, "datos/base_de_datos_gis.csv")
```
